from .. import loader, utils
from telethon.tl.types import Message
import asyncio
import time
from telethon.errors import FloodWaitError

@loader.tds
class MyBroadcasterMod(loader.Module):
    """Custom message broadcaster"""
    strings = {
        "name": "MyBroadcaster",
        "success": "<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!</b>",
        "error": "<b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:</b> {}",
        "broadcast_on": "<b>–†–∞—Å—Å—ã–ª–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞.</b>",
        "broadcast_off": "<b>–†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞.</b>",
        "wait_error": "<b>–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...</b>"
    }

    def __init__(self):
        self.broadcast_enabled = False

    async def client_ready(self, client, db):
        self.client = client

    async def send_message(self):
        if not self.broadcast_enabled:
            return False
        try:
            image_url = 'https://i.imgur.com/iOYNbtV.png'
            message_text = (
                "<b>–ó–ê–ï–ë–ê–õ–°–Ø –ò–°–ö–ê–¢–¨ </b><b><u>–ù–ï –î–û–†–û–ì–û–ô</u> –ù–û </b><b><u>–ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–ô</u> –î–ò–ó–ê–ô–ù ‚ùì</b>\n\n"
                "–†–∞–¥—ã –≤–∞–º –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å ‚Äî <b>MORIA DESIGN</b>, –ª—É—á—à–∏–π –¥–∏–∑–∞–π–Ω –∑–∞ –ª—É—á—à–∏–µ —Ü–µ–Ω—ã –≤–æ –≤—Å–µ–º —Ä—ã–Ω–∫–µ,\n"
                "—Å—Ä–µ–¥–Ω–∏–π —á–µ–∫ ‚Äî <b>250-500‚ÇΩ</b>\n\n"
                "üñåÔ∏è–î–µ–ª–∞–µ–º:\n"
                "‚Äî <b>–ê–≤–∞—Ç–∞—Ä–∫–∏</b>\n"
                "‚Äî <b>–†–µ–∫–ª–∞–º–Ω—ã–µ –±–∞–Ω–Ω–µ—Ä—ã</b>\n"  
                "‚Äî <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Ç–µ–º</b>\n"
                "‚Äî <b>–ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã</b>\n\n"
                "–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ: <a href='https://t.me/+wn_45A9wkbViMmFi'><b>@moriadesign</b></a>\n"
                "–°–≤—è–∑—å: <b>@imfckngmoriarty</b>\n"
                "–ì–∞—Ä–∞–Ω—Ç: <b>@zelenka_guarantor_robot</b>"
            )
            await self.client.send_file('zelenka_services', image_url, caption=message_text, parse_mode='html')
            await self.client.send_message('gdfgdfgdf235453', self.strings("success"), parse_mode='html')
            return True
        except FloodWaitError as e:
            wait_time = e.seconds
            await self.client.send_message('gdfgdfgdf235453', f"{self.strings('wait_error')} {wait_time} —Å–µ–∫—É–Ω–¥.", parse_mode='html')
            await asyncio.sleep(wait_time)
            return False
        except Exception as e:
            await self.client.send_message('gdfgdfgdf235453', self.strings("error").format(str(e)), parse_mode='html')
            return False

    @loader.command(ru_doc="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π")
    async def startbroadcastcmd(self, message: Message):
        self.broadcast_enabled = True
        await self.client.send_message(message.peer_id, self.strings("broadcast_on"))
        interval = 3605
        last_sent_time = 0
        while self.broadcast_enabled:
            current_time = time.time()
            if current_time - last_sent_time >= interval:
                await self.send_message()
            last_sent_time = current_time  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
            await asyncio.sleep(max(0, interval - (time.time() - last_sent_time)))

    @loader.command(ru_doc="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π")
    async def stopbroadcastcmd(self, message: Message):
        self.broadcast_enabled = False
        await self.client.send_message(message.peer_id, self.strings("broadcast_off"))
