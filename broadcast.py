from .. import loader, utils
from telethon.tl.types import Message
import asyncio
import time

@loader.tds
class MyBroadcasterMod(loader.Module):
    """Custom message broadcaster"""
    strings = {
        "name": "MyBroadcaster",
        "success": "<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!</b>",
        "error": "<b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:</b> {}"
    }

    async def client_ready(self, client, db):
        self.client = client

    async def send_message(self):
        try:
            image_url = 'https://i.imgur.com/iOYNbtV.png'  # URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            message_text = (
                "–¢—É—Ç —Ç–µ–∫—Å—Ç\n\n"
                "–ó–ê–ï–ë–ê–õ–°–Ø –ò–°–ö–ê–¢–¨ –ù–ï –î–û–†–û–ì–û–ô –ù–û –ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–ô –î–ò–ó–ê–ô–ù ‚ùì\n\n"
                "–†–∞–¥—ã –≤–∞–º –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å ‚Äî MORIA DESIGN, –ª—É—á—à–∏–π –¥–∏–∑–∞–π–Ω –∑–∞ –ª—É—á—à–∏–µ —Ü–µ–Ω—ã –≤–æ –≤—Å–µ–º —Ä—ã–Ω–∫–µ,\n"
                "—Å—Ä–µ–¥–Ω–∏–π —á–µ–∫ ‚Äî 250-500‚ÇΩ\n\n"
                "–î–µ–ª–∞–µ–º:\n"
                "‚öôÔ∏è- –ê–≤–∞—Ç–∞—Ä–∫–∏\n"
                "üëç- –†–µ–∫–ª–∞–º–Ω—ã–µ –±–∞–Ω–Ω–µ—Ä—ã\n"  
                "üëå- –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Ç–µ–º\n"
                "üåê- –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã\n\n"
                "–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ: @moriadesign\n"
                "(https://t.me/+wn_45A9wkbViMmFi)–°–≤—è–∑—å: @imfckngmoriarty\n"
                "–ì–∞—Ä–∞–Ω—Ç: @zelenka_guarantor_robot"
            )
            await self.client.send_file('zelenka_services', image_url, caption=message_text)
            await self.client.send_message('kgfdgkdfgk324', self.strings("success"))
        except Exception as e:
            await self.client.send_message('kgfdgkdfgk324', self.strings("error").format(str(e)))

    @loader.command(ru_doc="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π")
    async def mybroadcastcmd(self, message: Message):
        """Run the broadcaster"""
        interval = 3605  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        last_sent_time = 0
        while True:
            try:
                current_time = time.time()
                if current_time - last_sent_time >= interval:
                    await self.send_message()
                await asyncio.sleep(max(0, interval - (current_time - last_sent_time)))
            except Exception as e:
                await self.client.send_message('kgfdgkdfgk324', self.strings("error").format(str(e)))
                last_sent_time = time.time()
                await asyncio.sleep(max(0, interval - (current_time - last_sent_time)))
