
import logging

import requests
from telethon.tl.types import Message, MessageEntityUrl

from .. import loader, utils

logger = logging.getLogger(__name__)


@loader.tds
class AutoShortenerMod(loader.Module):
    """Automatically shortens urls in your messages, which are larger than specified threshold"""

    strings = {
        "name": "AutoShortener",
        "state": "üîó <b>Auotmatic url shortener is now {}</b>",
        "no_args": "üîó <b>No link to shorten</b>",
        "on": "on",
        "off": "off",
    }

    strings_ru = {
        "state": "üîó <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ–ª—å —Å—Å—ã–ª–æ–∫ —Ç–µ–ø–µ—Ä—å {}</b>",
        "no_args": "üîó <b>–ù–µ —É–∫–∞–∑–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è</b>",
        "_cmd_doc_autosurl": "–í–∫–ª—é—á–∏—Ç—å\\–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫",
        "_cmd_doc_surl": "[—Å—Å—ã–ª–∫–∞] [–¥–≤–∏–∂–æ–∫]- –°–æ–∫—Ä–∞—Ç–∏—Ç—å —Å—Å—ã–ª–∫—É",
        "_cls_doc": (
            "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∫—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –≤ —Ç–≤–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –¥–ª–∏–Ω–Ω–µ–µ"
            " –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫–æ–Ω—Ñ–∏–≥–µ"
        ),
        "on": "–≤–∫–ª—é—á–µ–Ω",
        "off": "–≤—ã–∫–ª—é—á–µ–Ω",
    }

    strings_de = {
        "state": "üîó <b>Automatisches URL-K√ºrzen ist jetzt {}</b>",
        "no_args": "üîó <b>Kein Link zum K√ºrzen</b>",
        "_cmd_doc_autosurl": (
            "Aktivieren\\Deaktivieren Sie das automatische K√ºrzen von URLs"
        ),
        "_cmd_doc_surl": "[URL] [Engine] - URL k√ºrzen",
        "_cls_doc": (
            "K√ºrzt automatisch URLs in Ihren Nachrichten, wenn sie l√§nger sind als"
            " Wert in der Konfiguration"
        ),
        "on": "Aktiviert",
        "off": "Deaktiviert",
    }

    strings_tr = {
        "state": "üîó <b>Otomatik URL kƒ±saltƒ±cƒ± ≈üimdi {}</b>",
        "no_args": "üîó <b>Kƒ±saltƒ±lacak URL yok</b>",
        "_cmd_doc_autosurl": (
            "URL'leri otomatik olarak kƒ±saltmayƒ± etkinle≈ütirin\\devre dƒ±≈üƒ± bƒ±rakƒ±n"
        ),
        "_cmd_doc_surl": "[URL] [motor] - URL kƒ±salt",
        "_cls_doc": (
            "URL'leri, yapƒ±landƒ±rmanƒ±n deƒüerinden daha uzun olduƒüunda mesajlarƒ±nƒ±zda"
            " otomatik olarak kƒ±saltƒ±r"
        ),
        "on": "a√ßƒ±k",
        "off": "kapalƒ±",
    }

    strings_hi = {
        "state": "üîó <b>‡§ë‡§ü‡•ã ‡§Ø‡•Ç‡§Ü‡§∞‡§è‡§≤ ‡§∂‡•â‡§∞‡•ç‡§ü‡§®‡§∞ ‡§Ö‡§¨ {} ‡§π‡•à</b>",
        "no_args": "üîó <b>‡§∏‡§Ç‡§ï‡•ç‡§∑‡§ø‡§™‡•ç‡§§ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•ã‡§à ‡§≤‡§ø‡§Ç‡§ï ‡§®‡§π‡•Ä‡§Ç</b>",
        "_cmd_doc_autosurl": "URL ‡§ï‡•ã ‡§∏‡•ç‡§µ‡§ö‡§æ‡§≤‡§ø‡§§ ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§õ‡•ã‡§ü‡§æ ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§≤‡•Ç\\‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•á‡§Ç",
        "_cmd_doc_surl": "[URL] [Engine] - URL ‡§ï‡•ã ‡§õ‡•ã‡§ü‡§æ ‡§ï‡§∞‡•á‡§Ç",
        "_cls_doc": (
            "‡§Ö‡§™‡§®‡•á ‡§∏‡§Ç‡§¶‡•á‡§∂‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§Ø‡•Ç‡§Ü‡§∞‡§è‡§≤ ‡§ï‡•ã ‡§õ‡•ã‡§ü‡§æ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à, ‡§ú‡§¨ ‡§µ‡•á ‡§µ‡§ø‡§®‡•ç‡§Ø‡§æ‡§∏ ‡§Æ‡•á‡§Ç ‡§®‡§ø‡§∞‡•ç‡§¶‡§ø‡§∑‡•ç‡§ü ‡§Æ‡§æ‡§® ‡§∏‡•á ‡§Ö‡§ß‡§ø‡§ï ‡§π‡•ã‡§§‡•á ‡§π‡•à‡§Ç"
        ),
        "on": "‡§ö‡§æ‡§≤‡•Ç",
        "off": "‡§¨‡§Ç‡§¶",
    }

    strings_uz = {
        "state": "üîó <b>URL avtomatik qisqartiruvchisi hozir {}</b>",
        "no_args": "üîó <b>Qisqartiladigan URL yo'q</b>",
        "_cmd_doc_autosurl": "URL'ni avtomatik ravishda qisqartishni yoqish\\o'chirish",
        "_cmd_doc_surl": "[URL] [mashina] - URL'ni qisqartirish",
        "_cls_doc": (
            "So'rovlarizdagi URL'ni konfiguratsiyadagi qiymatdan katta bo'lganda"
            " avtomatik ravishda qisqartadi"
        ),
        "on": "yoqilgan",
        "off": "o'chirilgan",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "threshold",
                80,
                lambda: "Urls larger than this value will be automatically shortened",
                validator=loader.validators.Integer(minimum=50),
            ),
            loader.ConfigValue(
                "auto_engine",
                "owo",
                lambda: "Engine to auto-shorten urls with",
                validator=loader.validators.Choice(["owo", "gg", "gay"]),
            ),
        )

    async def autosurlcmd(self, message: Message):
        """Toggle automatic url shortener"""
        state = not self.get("state", False)
        self.set("state", state)
        await utils.answer(
            message, self.strings("state").format("on" if state else "off")
        )

    async def surlcmd(self, message: Message):
        """[url] [engine]- Shorten url"""
        if (
            not getattr(message, "raw_text", False)
            or not getattr(message, "entities", False)
            or not message.entities
            or not any(
                isinstance(entity, MessageEntityUrl) for entity in message.entities
            )
        ):
            reply = await message.get_reply_message()
            if (
                not reply
                or not getattr(reply, "raw_text", False)
                or not getattr(reply, "entities", False)
                or not reply.entities
                or not any(
                    isinstance(entity, MessageEntityUrl) for entity in reply.entities
                )
            ):
                await utils.answer(message, self.strings("no_args"))
                return

            txt = reply.raw_text
            text = reply.text
            entities = reply.entities
            just_url = False
        else:
            txt = message.raw_text
            text = message.text
            entities = message.entities
            just_url = True

        urls = [
            txt[entity.offset : entity.offset + entity.length] for entity in entities
        ]

        if just_url:
            text = ""

        for url in urls:
            surl = await self.shorten(
                url, txt.split()[-1] if len(txt.split()) > 1 else None
            )
            if not just_url:
                text = text.replace(url, surl)
            else:
                text += f"{surl} | "

        await utils.answer(message, text.strip(" | "))

    @staticmethod
    async def shorten(url, engine=None) -> str:
        if not engine or engine == "gg":
            r = await utils.run_sync(
                requests.post,
                "https://bot1.org/api",  # Changed API endpoint
                json={"url": url},  # Send the URL as JSON
                headers={"Content-Type": "application/json"},
            )
 
            response_data = r.json()
            return response_data.get("bot", url)  # Return the shortened URL or the original if something goes wrongelif engine in ["owo", "gay"]:
            r = await utils.run_sync(
                requests.post,
                "https://owo.vc/generate",
                json={
                    "link": url,
                    "generator": engine,
                    "preventScrape": True,
                    "owoify": True,
                },
                headers={"User-Agent": "https://mods.hikariatama.ru/view/surl.py"},
            )

            logger.debug(r.json())

            return"https://" + r.json()["result"]


    async def watcher(self, message: Message):
        if (
            not getattr(message, "text", False)
            or not getattr(message, "out", False)
            or not getattr(message, "entities", False)
            or not message.entities
            or not any(
                isinstance(entity, MessageEntityUrl) for entity in message.entities
            )
            or not self.get("state", False)
            or message.raw_text.lower().startswith(self.get_prefix())
        ):
            return

        entities = message.entities
        urls = list(
            filter(
                lambda x: len(x) > int(self.config["threshold"]),
                [
                    message.raw_text[entity.offset : entity.offset + entity.length]
                    for entity in entities
                ],
            )
        )

        if not urls:
            return

        text = message.text

        for url in urls:
            text = text.replace(
                url, await self.shorten(url, self.config["auto_engine"])
            )

        await message.edit(text)